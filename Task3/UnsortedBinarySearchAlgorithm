Algorithm for Binary Search on Unsorted Array:

Step1: Start with an unsorted array and the target element x to be searched.
Step2: Sort the array using any sorting algorithm (e.g., merge sort, quicksort, etc.) to convert the unsorted array into a sorted array.
Step3: Perform binary search on the sorted array to find the target element x.
    3.1 Set low as the index of the first element in the sorted array (0).
    3.2 Set high as the index of the last element in the sorted array (length of the array - 1).
    3.3Repeat until the pointers low and high meet each other:
Step4: Calculate the middle index mid as (low + high) // 2.
Step5: If the element at sorted_array[mid] is equal to x, return mid.
Step6: If the element at sorted_array[mid] is less than x, set low = mid + 1.
Step7: If the element at sorted_array[mid] is greater than x, set high = mid - 1.
Step8: If the loop exits without finding the target element, return -1 or any other appropriate indication to signify that the element is not present in the array.